import re

import numpy as np
import pandas as pd


def build_counter_parametric_knowledge(
    statement_subject: str,
    rel_lemma: str,
    statement_object: str,
    relation_group_id: str,
    parametric_object: str,
    parametric_object_first_token_log_probas_distribution: list,
    statement: str,
    nb_counter_parametric_knowledge: int,
    all_dataset_objects_to_their_first_token_id: list,
    parametric_knowledge_rel: pd.DataFrame,
) -> list:
    """this function returns the `nb_counter_parametric_knowledge` counter-knowledge triplets for a specific
    knowledge triplet (subject, relation, object)

    statement_subject (str): subject
    rel_lemma (str): relation
    statement_object (str):
    parametric_object (str): object
    parametric_object_first_token_log_probas_distribution (list): the log-probability distribution of the first token of
        `parametric_object` given the parametric knowledge prompt.
    nb_counter_parametric_knowledge (int): the number of counter-knowledge triplets to return
    statement: a statement in natural language representing a subject, relation, and object
    all_dataset_objects_to_their_first_token_id: a dict that maps objects to their corresponding first token id.
    parametric_knowledge_rel: the parametric knowledge dataset for the current relation (in order to only select counter-
        parametric objects that have the same relation)
    relation_group_id: the relation id of the relation group

    Output:
    A list of dictionaries with the following structure:
        - statement_subject: the same subject as the input
        - rel_lemma: the same relation as the input
        - statement_object: the raw object as it appears in the ParaRel dataset
        - statement: the same statement as the input
        - parametric_knowledge_object: the same parametric_object as the input
        - counter_knowledge_object: the selected counter-parametric knowledge object
        - relation_group_id: the same relation_group_id as the input
        - statement_query: the subject-relation query in the statement (i.e. without the object)
    """
    # object -> log-probas of the first token
    objects_to_first_token_log_probas = list(
        zip(
            all_dataset_objects_to_their_first_token_id.keys(),
            np.array(parametric_object_first_token_log_probas_distribution)[
                list(all_dataset_objects_to_their_first_token_id.values())
            ],  # only consider the object log-probas
        )
    )

    # all the objects of the relation
    valid_objects = set(parametric_knowledge_rel.parametric_object.unique()) - set([parametric_object])

    objects_to_first_token_log_probas.sort(key=lambda x: x[1], reverse=False)

    selected_counter_objects = [counter_object[0] for counter_object in objects_to_first_token_log_probas]
    # filter counter-objects that don't have the same relation
    selected_counter_objects = [obj for obj in selected_counter_objects if obj in valid_objects]

    counter_parametric_knowledge = []

    for counter_object in selected_counter_objects[:nb_counter_parametric_knowledge]:
        assert isinstance(counter_object, str)
        assert counter_object in parametric_knowledge_rel.parametric_object.unique()

        statement_subject_uncased = re.compile(statement_object + ".", re.IGNORECASE)
        statement_query = statement_subject_uncased.sub("", statement).strip()

        counter_parametric_knowledge.append(
            {
                "statement_subject": statement_subject,
                "rel_lemma": rel_lemma,
                "statement_object": statement_object,
                "counter_knowledge_object": counter_object,
                "statement": statement,
                "statement_query": statement_query,
                "parametric_knowledge_object": parametric_object,
                "relation_group_id": relation_group_id,
            }
        )

    return counter_parametric_knowledge


def get_objects_to_first_token_id_dict(parametric_knowledge: pd.DataFrame) -> dict:
    """this function returns a dict that maps objects to their corresponding first token id.
    This is used in the build_counter_parametric_knowledge function in order to select the
    counter-objects with the lowest chances to be generated by the LLM, considering a greedy
    decoding strategy.

    Args:
        parametric_knowledge (pd.DataFrame): the parametric knowledge dataset

    Returns:
        dict: a dict that maps each object to its first token id
    """

    objects_first_token_ids = [tokens_id[0].cpu() for tokens_id in parametric_knowledge.model_output_tokens_ids]
    objects = parametric_knowledge.parametric_object

    return dict(zip(objects, objects_first_token_ids))
