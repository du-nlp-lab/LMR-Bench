{
  "1": "Probing the Decision Boundaries of In-context\nLearning in Large Language Models\nSiyan Zhao, Tung Nguyen, Aditya Grover\nDepartment of Computer Science\nUniversity of California Los Angeles\n{siyanz,tungnd,adityag}@cs.ucla.edu\nAbstract\nIn-context learning is a key paradigm in large language models (LLMs) that enables\nthem to generalize to new tasks and domains by simply prompting these models\nwith a few exemplars without explicit parameter updates. Many attempts have\nbeen made to understand in-context learning in LLMs as a function of model scale,\npretraining data, and other factors. In this work, we propose a new mechanism\nto probe and understand in-context learning from the lens of decision boundaries\nfor in-context binary classification. Decision boundaries are straightforward to\nvisualize and provide important information about the qualitative behavior of the\ninductive biases of standard classifiers. To our surprise, we find that the decision\nboundaries learned by current LLMs in simple binary classification tasks are\noften irregular and non-smooth, regardless of linear separability in the underlying\ntask. This paper investigates the factors influencing these decision boundaries and\nexplores methods to enhance their generalizability. We assess various approaches,\nincluding training-free and fine-tuning methods for LLMs, the impact of model\narchitecture, and the effectiveness of active prompting techniques for smoothing\ndecision boundaries in a data-efficient manner. Our findings provide a deeper\nunderstanding of in-context learning dynamics and offer practical improvements\nfor enhancing robustness and generalizability of in-context learning.1\n1\nIntroduction\nRecent language models, such as GPT-3+ [Brown et al., 2020, Achiam et al., 2023], have demonstrated\nthe ability to scale performance with increased training dataset size and model capacity through\nthe simple objective of next token prediction [Kaplan et al., 2020]. A key emergent behavior of\nthese transformer-based models is in-context learning, which allows the model to learn tasks by\nconditioning on a sequence of demonstrations without explicit training [Wei et al., 2022]. This unique\ncapability allows LLMs to adapt seamlessly to new tasks, often achieving superior performance in\nfew-shot settings [Brown et al., 2020]. Despite significant successes, the underlying mechanisms of\nhow in-context learning works remain partially understood.\nRecent attempts to understand in-context learning have focused on various aspects. From a theoretical\nstandpoint, studies by Von Oswald et al. [2023] and Dai et al. [2023] have linked the mechanisms\nof in-context learning to gradient descent, suggesting that transformers can emulate optimization\nprocesses. On the practical side, research has investigated the impact of different factors on in-context\nlearning. Works by Min et al. [2022b] and Shi et al. [2023] reveal that accurate demonstrations are not\nessential for effective in-context learning. On the other hand, factors such as the prompt structure and\nmodel size [Wei et al., 2023, Webson and Pavlick, 2022], or the order of in-context examples [Chen\net al., 2024] greatly affect outcomes. More recently, with the development of LLMs supporting longer\n1Our code is released at https://github.com/siyan-zhao/ICL_decision_boundary.\n38th Conference on Neural Information Processing Systems (NeurIPS 2024).\narXiv:2406.11233v3  [cs.LG]  9 Dec 2024\n",
  "2": "20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\nDecision Tree\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\nMLP\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\nK-NN\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\nSVM (RBF Kernel)\n20\n40\n60\n80\nFeature 1\n20\n30\n40\n50\n60\n70\n80\n90\nFeature 2\nLLama-3-8B\n20\n40\n60\n80\nFeature 1\n20\n30\n40\n50\n60\n70\n80\n90\nFeature 2\nGPT-4o\nClass 1 (In-Context/Training Examples)\nClass 2 (In-Context/Training Examples)\nClass 1 (Model Prediction)\nClass 2 (Model Prediction)\nFigure 1: Decision boundaries of LLMs and traditional machine learning models on a linearly\nseparable binary classification task. The background colors represent the model’s predictions,\nwhile the points represent the in-context or training examples. LLMs exhibit non-smooth decision\nboundaries compared to the classical models. See Appendix E for model hyperparameters.\ncontext lengths up to 10M [Reid et al., 2024], studies have shown that in-context learning performance\nimproves with significant number of demonstrations [Agarwal et al., 2024, Bertsch et al., 2024],\nwhere the performance can be comparable to fine-tuning on the same amount of demonstrations.\nAdditionally, works by Garg et al. [2022], Nguyen and Grover [2022] have demonstrated that small\ntransformers trained from scratch can learn unseen function classes in-context from examples.\nIn contrast to existing approaches, our study introduces a fresh perspective by viewing in-context\nlearning in large language models (LLMs) as a unique machine learning algorithm. This conceptual\nframework enables us to leverage a classical tool from machine learning – analyzing decision\nboundaries in binary classification tasks. By visualizing these decision boundaries, both in linear\nand non-linear contexts, we gain invaluable insights into the performance and behavior of in-context\nlearning. This method allows us to probe the inductive biases and generalization capabilities of\nLLMs and offers a unique assessment of the robustness of their in-context learning performance.\nConsequently, this approach provides a comprehensive means to qualitatively analyze the underlying\nmechanisms that govern in-context learning and suggest ways to improve its performance in LLMs.\nTo our surprise, we found that the recent LLMs struggle to provide smooth decision boundaries in\nall the classification tasks we considered, regardless of the model size, the number and ordering\nof in-context examples, and semantics of the label format. This issue persists even for simple\nbinary linear classification tasks, where classical methods such as SVM can easily achieve smooth\nboundaries with fewer examples as shown in Figure 1. This observation raises questions about the\nfactors that influence the decision boundaries of LLMs. To explore this, we experimented with a\nseries of open-source LLMs including Llama2-7b, Llama2-13b, Llama3-8b [Touvron et al., 2023],\nMistral-7b [Jiang et al., 2023], pruned Llama2-1.3b [Xia et al., 2023], as well as state-of-the-art\nclosed-source LLMs GPT-4o and GPT-3-Turbo [Brown et al., 2020]. We then explore methods to\nsmooth the decision boundary, including fine-tuning and adaptive prompting strategies. Our work\nprovides valuable practical insights for understanding and improving in-context learning in LLMs\nthrough a new perspective. Our contributions can be summarized as follows:\n• We introduce a novel mechanism to probe and understand in-context learning in LLMs by\nvisualizing and analyzing the decision boundaries on classification tasks.\n• We demonstrate that state-of-the-art LLMs exhibit non-smooth, irregular decision boundaries\neven on simple linearly separable tasks, unlike classical ML models.\n• We study the influence of various factors impacting decision boundary smoothness, including\nmodel size, pretraining data and objectives, number of in-context examples, quantization levels,\nlabel semantics, and order of examples.\n• We identify methods to improve the smoothness of LLM decision boundaries, such as fine-tuning\nearlier layers, fine-tuning on synthetic tasks and uncertainty-aware active learning.\n2\nBackground\n2.1\nTraining Large Language Models\nLarge Language Models (LLMs) are trained on vast corpora of text using unsupervised learning.\nDuring training, these models learn to predict the next token in a sequence. Given a sequence\n2\n",
  "3": "of tokens (x1, x2, . . . , xt−1), the model predicts the next token xt by maximizing the likelihood\nP(xt|x1, x2, . . . , xt−1). The training objective typically involves minimizing the cross-entropy loss:\nL = −\nN\nX\ni=1\nTi\nX\nt=1\nlog P(xt|x1, x2, . . . , xt−1)\n(1)\nwhere Ti is the number of tokens in the i-th sequence and N is the total number of sequences in the\ncorpus. During training, teacher forcing is often employed, where the model receives the ground\ntruth token xt as input at each time step instead of its own prediction, enabling parallel training.\n2.2\nIn-Context Learning in LLMs\nAfter training, LLMs can generalize to new tasks through a mechanism known as in-context learning.\nLet S = {(x1, y1), (x2, y2), . . . , (xn, yn)} represent the set of n input-output pairs provided as\nexamples in the prompt, where xi is an input and yi is the corresponding output. Given a new input\nxnew, the LLM is turned into a task-specific model that predicts the output ˆynew by conditioning on\nthe given examples: P(ˆynew|xnew, {(x1, y1), (x2, y2), . . . , (xn, yn)}). In-context learning allows the\nLLM to perform tasks by leveraging the context provided by these examples, thereby inferring the\ntask and generating appropriate responses for new inputs. This approach utilizes the model’s ability\nto recognize patterns and apply learned knowledge without additional training or fine-tuning.\n3\nMethodology\nWe aim to better understand in-context learning in Large Language Models by investigating their\ndecision boundaries on a series of binary classification tasks. To increase the generality of our\nframework, we evaluate several existing LLMs on different task distributions under different settings.\nWe present the general framework here, and refer to Section 4 for specific experiment settings.\n3.1\nIn-Context Classification\nConsider a K-class classification task with a data distribution pdata(x, y), where x is the input feature\nand y ∈{1, . . . , K} is the class label. To construct an in-context prompt, we sample n examples\n(xi, yi) ∼pdata for i = 1, . . . , n. Given a new test point xtest, in-context learning constructs a prompt\nP = (x1, y1, . . . , xn, yn, xtest) by concatenating the n sampled examples and the test point. The\nprompt P is then fed to the LLM π, which predicts a class ˆy for xtest.\nWe prompt the LLM with P and obtain its prediction for xtest by choosing the most likely class in the\nnext token distribution. Formally, let V denote the size of the LLM’s vocabulary, and l ∈RV be the\nvector of logit values for each of the tokens. To obtain a class prediction, we convert each class label\ni into a unique token id, say c(i) and choose the class with the maximum logit value as the predicted\nlabel for xquery, i.e., ˆy = arg maxi∈{1,...,K} lc(i).\n3.2\nDecision Boundary Visualization\nTo visualize the decision boundary of a model π, we generate a grid of points covering the feature\nspace defined by the in-context examples set S. Let S = {(x1, y1), (x2, y2), . . . , (xk, yk)} represent\nthe set of in-context examples, and xmin, xmax ∈Rd denote the minimum and maximum values of the\nfeatures in S along each dimension. We create a uniform grid with G points along each dimension,\nresulting in a total of Gd grid points. The grid points are denoted as Xgrid = {xquery | xquery ∈\n[xmin, xmax]d, xquery = xmin + i∆x, i ∈{0, 1, . . . , G −1}} where ∆x =\n1\nG−1(xmax −xmin) is the\ngrid spacing along each dimension. Each point xquery ∈Xgrid is a query input, and the model π is\nprompted with the sequence (x1, y1, . . . , xk, yk, xquery) to predict the corresponding class label ˆy.\nThe decision boundary is then visualized by plotting the predicted labels ˆy over the grid Xgrid.\n3\n",
  "4": "4\nExperiments\nIn this section, we examine existing LLMs through the lens of decision boundaries by conducting a\nseries of binary classification tasks under varying conditions. Our experiments aim to address the\nfollowing key questions:\n• How do existing pretrained LLMs perform on binary classification tasks? §4.1\n• How do different factors influence the decision boundaries of these models? §4.2\n• How can we improve the smoothness of decision boundaries? §4.3\nClassification Tasks. We investigate the decision boundary of LLMs by prompting them with n\nin-context examples of binary classification tasks, with an equal number of examples for each class.\nWe generate classification datasets using scikit-learn [Pedregosa et al., 2011], creating three\ntypes of linear and non-linear classification tasks: linear, circle, and moon, each describing different\nshapes of ground-truth decision boundaries. Detailed information on the dataset generation can be\nfound in Appendix G. In addition to the in-context examples, we calculate the in-context learning\naccuracy on a held-out test set of size 100. We sample in-context examples and test points from\nclassification task and convert them into prompt, with an example shown in Appendix F.\nObtaining Decision Boundaries of Language Models. We study an extensive range of models,\nwith sizes ranging from 1.3B to 13B parameters, including open-source models such as Llama2-7B,\nLlama3-8B, Llama2-13B, Mistral-7B-v0.1, and sheared-Llama-1.3B. We also extend our analysis to\nstate-of-the-art closed-source LLMs, including GPT-4o and GPT-3.5-turbo. We generate the decision\nboundaries of the open-source models with 8-bit quantization due to computational constraints. We\nchoose a grid size scale of 50 x 50, resulting in 2500 queries for each decision boundary. For the\nopen-source models, we use the approach described in 3.2 to get predictions. For the closed-source\nmodels, we use the next token generation as the prediction.\n4.1\nNon-Smooth Decision Boundaries of LLMs.\nFigure 2 compares the decision boundaries of 6 LLMs when provided with 128 in-context examples.\nEven on simple linearly separable classification problems, all of these models exhibit non-smooth\ndecision boundaries. The decision boundaries vary significantly across models, indicating that these\nmodels have different reasoning abilities to interpret the same in-context data. All models show\nfragmented decision regions, which means small changes in the input features can result in different\nclassifications. This raises concerns about the reliability of LLMs and their practical deployment, as\neven when test accuracy for classification is high (shown in Figure 3, where test accuracy increases\nwith the number of context examples), the underlying decision boundary lacks generalization. We\nfurther demonstrate nonsmoothness in NLP text classification tasks by projecting text input into\n2D space, as detailed in Appendix H. In the following sections, we will explore factors that affect\ndecision boundary smoothness and investigate methods to improve smoothness.\n20\n40\n60\n80\nFeature 1\n20\n30\n40\n50\n60\n70\n80\n90\nFeature 2\nSheared-LLama-1.3B\n20\n40\n60\n80\nFeature 1\n20\n30\n40\n50\n60\n70\n80\n90\nFeature 2\nMistral-7B-v0.1\n20\n40\n60\n80\nFeature 1\n20\n30\n40\n50\n60\n70\n80\n90\nFeature 2\nLLama-3-8B\n20\n40\n60\n80\nFeature 1\n20\n30\n40\n50\n60\n70\n80\n90\nFeature 2\nLLama-2-13B\n20\n40\n60\n80\nFeature 1\n20\n30\n40\n50\n60\n70\n80\n90\nFeature 2\nGPT-3.5-turbo\n20\n40\n60\n80\nFeature 1\n20\n30\n40\n50\n60\n70\n80\n90\nFeature 2\nGPT-4o\nClass 1 (In-Context Examples)\nClass 2 (In-Context Examples)\nClass 1 (LLM Prediction)\nClass 2 (LLM Prediction)\nFigure 2: Visualizations of decision boundaries for various LLMs, ranging in size from 1.3B to 13B,\non a linearly seperable binary classification task. The in-context data points are shown as scatter\npoints and the colors indicate the label determined by each model. These decision boundaries are\nobtained using 128 in-context examples. The visualization highlights that the decision boundaries of\nthese language models are not smooth.\n4\n",
  "5": "2^3 2^4\n2^5\n2^6\n2^7\nNumber of In-Context Examples\n0.6\n0.7\n0.8\n0.9\n1.0\nTest Accuracy\nTask: linear\nSheared-LLama-1.3B\nLLama-2-7B\nMistral-7B-v0.1\nLLama-3-8B\nLLama-2-13B\nSVM Poly Kernel\nMLP Baseline\n2^3 2^4\n2^5\n2^6\n2^7\nNumber of In-Context Examples\n0.5\n0.6\n0.7\n0.8\n0.9\n1.0\nTest Accuracy\nTask: circle\nSheared-LLama-1.3B\nLLama-2-7B\nMistral-7B-v0.1\nLLama-3-8B\nLLama-2-13B\nSVM Poly Kernel\nMLP Baseline\n2^3 2^4\n2^5\n2^6\n2^7\nNumber of In-Context Examples\n0.5\n0.6\n0.7\n0.8\n0.9\n1.0\nTest Accuracy\nTask: moon\nSheared-LLama-1.3B\nLLama-2-7B\nMistral-7B-v0.1\nLLama-3-8B\nLLama-2-13B\nSVM Poly Kernel\nMLP Baseline\nFigure 3: Test accuracy for LLMs and baselines across three classification tasks (linear, circle, and\nmoon), with each subplot illustrating the test accuracy as the number of in-context examples increases.\nThe baselines are the SVM with a polynomial kernel and the MLP with two hidden layers. Shaded\nregions represent the standard error of the mean accuracy across 5 seeds.\n4.2\nHow Do Different Factors Influence the Decision Boundaries?\nImpact of Model Size on Decision Boundary and Accuracy From Figure 2, model sizes increase\nfrom left to right, yet there is no clear correlation between model size and the smoothness of\nthe decision boundary. Even the most powerful model, GPT-4o, demonstrates fragmented decision\nregions. This suggests that increasing model size alone is insufficient for improving decision boundary\nsmoothness. However, as shown in Figure 3, larger models tend to perform better in terms of test\naccuracy compared to smaller models, with Llama-1.3B often performing the worst.\n20\n30\n40\n50\n60\nFeature 1\n40\n45\n50\n55\n60\nFeature 2\nLLama-2-7B\n8 Examples\n10\n20\n30\n40\n50\n60\nFeature 1\n40\n45\n50\n55\n60\n65\n70\nFeature 2\nLLama-2-7B\n16 Examples\n10\n20\n30\n40\n50\n60\nFeature 1\n30\n40\n50\n60\n70\n80\nFeature 2\nLLama-2-7B\n32 Examples\n20\n40\n60\n80\nFeature 1\n20\n30\n40\n50\n60\n70\n80\n90\nFeature 2\nLLama-2-7B\n64 Examples\n20\n40\n60\n80\nFeature 1\n20\n30\n40\n50\n60\n70\n80\n90\nFeature 2\nLLama-2-7B\n128 Examples\n20\n40\n60\n80\nFeature 1\n20\n30\n40\n50\n60\n70\n80\n90\nFeature 2\nLLama-2-7B\n256 Examples\nFigure 4: Decision boundary of Llama2-7b with increasing in-context examples from 8 to 256.\n25\n30\n35\n40\n45\n50\n55\n60\nFeature 1\n10\n20\n30\n40\n50\n60\n70\nFeature 2\nOrder 0\n25\n30\n35\n40\n45\n50\n55\n60\nFeature 1\n10\n20\n30\n40\n50\n60\n70\nFeature 2\nOrder 1\n25\n30\n35\n40\n45\n50\n55\n60\nFeature 1\n10\n20\n30\n40\n50\n60\n70\nFeature 2\nOrder 2\n25\n30\n35\n40\n45\n50\n55\n60\nFeature 1\n10\n20\n30\n40\n50\n60\n70\nFeature 2\nOrder 3\n25\n30\n35\n40\n45\n50\n55\n60\nFeature 1\n10\n20\n30\n40\n50\n60\n70\nFeature 2\nOrder 4\nFigure 5: The sensitivity of the Llama3-8b model’s decision boundary to the order of in-context\nexamples. Each subplot (Order 0 to Order 4) shows the model’s decision boundary with the same 32\nexamples shuffled differently.\nIncreasing In-Context Examples Does Not Guarantee Smoother Decision Boundaries While\nclassification accuracies tend to improve with more in-context examples—and it’s worth noting that\nLlama-3-8B and Mistral-7B’s accuracy scales similarly to the SVM and MLP baselines—Figure 4\nreveals that this does not translate to smoother decision boundaries. Despite the increase in accu-\nracy, the decision boundaries remain fragmented, indicating that merely providing more in-context\nexamples is not sufficient for achieving smoother decision regions.\nHow Does Quantization Influence Decision Boundaries? Figure 6a illustrates the decision bound-\naries of the LLaMA-2-7B model under different quantization levels [Dettmers et al., 2022]. When\ntransitioning from 8-bit to 4-bit quantization, the red regions around the red in-context learning\nexamples turn blue. This indicates that the reduced precision from 4-bit quantization significantly\naffects points near the decision boundary or areas where the model is most uncertain. For further\ninvestigation, we plot the probability prediction for class 1 (Figure 6b). The white regions, indicating\na 50% probability for both classes, highlight the areas most impacted by quantization. Hence, varying\nquantization levels can flip the LLM’s decisions in the regions of highest uncertainty.\n5\n",
  "6": "10\n20\n30\n40\n50\n60\n70\n80\nFeature 1\n20\n30\n40\n50\n60\n70\n80\n90\nFeature 2\n4 Bit Quantization\n10\n20\n30\n40\n50\n60\n70\n80\nFeature 1\n20\n30\n40\n50\n60\n70\n80\n90\nFeature 2\n8 Bit Quantization\n10\n20\n30\n40\n50\n60\n70\n80\nFeature 1\n20\n30\n40\n50\n60\n70\n80\n90\nFeature 2\nNo Quantization\n(a) Decision boundaries of Llama-2-7b with different quanti-\nzation choices on a linearly seperable tsak.\n10\n20\n30\n40\n50\n60\n70\n80\nFeature 1\n20\n30\n40\n50\n60\n70\n80\n90\nFeature 2\nPredicted Probability of Class 1\n0.00\n0.11\n0.22\n0.33\n0.44\n0.55\n0.66\n0.77\n0.88\n0.99\n(b) Prediction of probability of class 1\nwith 8-bit quantization.\nFigure 6: Impact of quantization on Llama2-7-8b’s decision boundaries and probability predictions.\nAre Decision Boundaries Sensitive to the Prompt Format? Yes, decision boundaries are sensitive\nto the labels’ names, as shown in Figure 7. Using semantically unrelated labels, such as “Foo” and\n“Bar” as suggested in [Wei et al., 2023], results in flipped predictions compared to using reversed class\nnames like \"Bar\" and \"Foo\". This suggests that the LLM’s prediction still depend on its semantic\nprior knowledge of the labels.\n20\n40\n60\n80\nFeature 1\n20\n30\n40\n50\n60\n70\n80\n90\nFeature 2\n\"0, 1\"\nLLama-2-7B\n20\n40\n60\n80\nFeature 1\n20\n30\n40\n50\n60\n70\n80\n90\nFeature 2\n\"Foo, Bar\"\nLLama-2-7B\n20\n40\n60\n80\nFeature 1\n20\n30\n40\n50\n60\n70\n80\n90\nFeature 2\n\"Bar, Foo\"\nLLama-2-7B\n20\n40\n60\n80\nFeature 1\n20\n30\n40\n50\n60\n70\n80\n90\nFeature 2\n\"A, B\"\nLLama-2-7B\n20\n40\n60\n80\nFeature 1\n20\n30\n40\n50\n60\n70\n80\n90\nFeature 2\n\"Positive, Negative\"\nLLama-2-7B\n20\n40\n60\n80\nFeature 1\n20\n30\n40\n50\n60\n70\n80\n90\nFeature 2\n\"Yes, No\"\nLLama-2-7B\nFigure 7: The decision boundaries of LLama-2-7B and LLama-3-8B, across various class labels.\nEach row corresponds to a model, and each column represents a different class label, shown in quotes.\nAre Decision Boundaries Sensitive to the Order of In-Context Learning Examples? Recent\nworks have shown that LLMs are sensitive to the order of in-context examples [Chen et al., 2024],\nwhich can significantly influence downstream performance. Similarly, as illustrated in Figure 5,\nwe demonstrate that the model’s decision boundaries vary with different shuffles of the in-context\nexamples, highlighting the sensitivity of the decision boundaries to the order of the examples.\n4.3\nHow to Improve the Decision Boundary Smoothness?\nCan We Finetune LLMs on the In-Context Examples to Achieve Smoother Decision Boundaries?\nOur experiments indicate that finetuning LLMs on in-context examples does not result in smoother\ndecision boundaries. Specifically, we finetuned Llama3-8B on 128 in-context learning examples\nand found that the resulting decision boundaries remained non-smooth. Examples of the decision\nboundaries after finetuning are provided in Appendix B.\nCan We Finetune LLMs on a Dataset of Classification Tasks to Achieve Smoother Decision\nBoundaries? Previous works have shown that finetuning a pretrained LLM on a large collection of\ntasks improves its in-context learning performance on unseen tasks [Min et al., 2022a]. In this section,\nwe investigate if the same paradigm helps improve the decision boundary smoothness of LLMs.\nTo do this, we finetune a pretrained Llama model [Touvron et al., 2023] on a set of 1000 binary\nclassification tasks generated from scikit-learn [Pedregosa et al., 2011], where the ground-truth\ndecision boundary is either linear, circle-shaped, or moon-shaped, with equal probabilities. For each\ntask, we sample randomly N = 256 data points x ∼Xgrid and their corresponding label y′s. We\nthen sample the number of context points m ∼U[8, 128], and finetune the LLM to predict yi>m\ngiven xi>m and the preceding examples:\nL(π) = E\n\"\nN\nX\ni=m+1\nlog p(yi | xi, x1:i−1, y1:i−1)\n#\n,\n(2)\nwhere the expectation is with respect to task, data points {(xi, yi)}N\ni=1, and the number of context\npoints m. After training, we evaluate the same finetuned model on various binary classification tasks\n6\n",
  "7": "with varying numbers of context points. To ensure the test tasks are unseen during training, we use\ndifferent parameters in creating the datasets, such as the separateness between two classes and the\nscale between the inner and outer circles in the circle task. See Appendix G for more details.\nWe consider several finetuning settings for ablation studies. 1) In the first setting, we finetune the\npretrained LLM using LoRA [Hu et al., 2021] and finetune the attention layers. 2) We finetune\nonly the token embedding layer of LLM. 3) We finetune only the linear head layer of LLM. Then\nwe consider modifying the architecture of the LLM: In this setting, we keep the core transformer\nbackbone of the LLM frozen, attach randomly initialized embedding layers and prediction head to the\nmodel, and train the entire model using objective (2). This stems from the intuition that task-specific\nembedding and prediction layers allow the model to maximally utlize the general pattern-matching\ncapabilities of the transformer backbone for the new task. We refer to this model as CustomLLM,\nand consider its three variants, which add 1) a new embedding layer for x, 2) a new prediction head\nfor y, and 3) new embedding layers for x, y, and a new prediction head for y. The embedding layers\nand prediction head are MLPs with one hidden layer. We embed the raw numerical values instead\nof the text representation of x whenever a new embeddding layer for x is used (same for y), and\npredict directly the binary class values instead of text labels whenever the new prediction head is\nused. Results of Finetuning LLM and CustomLLM in Figure 8 and Figure 9 show that finetuning\nthe intermediate and earlier embedding layers leads to smoother decision boundary compared to\nfinetuning the top prediction head.\n0\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\nFinetune LLM\n Linear Head\n0\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\nFinetune LLM\n Embedding Layer\n0\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\nFinetune LLM\n Attention Layers\nFigure 8: Decision boundary of Llama3-8B post finetuning the linear head, embedding layer and the\nattention layers. Finetuning the latter two layers improves the smoothness.\n0\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\nCustomLLM\nPrediction Head\n0\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\nCustomLLM\nInput embed only\n0\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\nCustomLLM\nInput & Output\nFigure 9: CustomLLM finetuning ablations. Decision boundary after finetuning the prediction head,\ninput embedding layer and both layers for the CustomLLM.\nCan LLMs finetuned on one in-context learning task generalize to more complex in-context\nlearning tasks? In this section, we further explore whether a LLM fine-tuned only on a linear\ntask can achiever smoother decision boundaries on unseen and more complex tasks. As shown in\nFigure 10, we compare the decision boundaries of Llama3-8b before and after SFT on the linear\ntask only. Unexpectedly, we found it generalizes to unseen non-linear tasks as well as 3-class and\n4-class classification tasks, despite only being trained on a binary linear task. The smoother decision\nboundaries observed in these unseen tasks suggest that fine-tuning on a synthetic in-context learning\ntask can have downstream benefits for other tasks, enabling the model to be more robust in in-context\nlearning.\nCan we train a transformer from scratch to learn smooth decision boundary in-context? One\nmay wonder whether a small transformer trained from scratch can provide smooth decision boundaries.\nTo answer this, we train TNPs [Nguyen and Grover, 2022] , a transformer-based model specifically\ndesigned for in-context learning. For each sequence of data points {(xi, yi)}N\ni=1 from a task C, TNPs\nlearn to predict the query labels yi>m given the query inputs xi>m and the context pairs, assuming\n7\n",
  "8": "25\n50\n75\nFeature 1\n20\n40\n60\n80\nFeature 2\n25\n50\n75\nFeature 1\n0\n20\n40\n60\n80\nFeature 2\n25\n50\n75\nFeature 1\n20\n40\n60\n80\nFeature 2\n25\n50\n75\nFeature 1\n20\n40\n60\n80\nFeature 2\n(a) Decision boundaries before SFT on linear data of Llama3-8b across 4 tasks.\n25\n50\n75\nFeature 1\n20\n40\n60\n80\nFeature 2\n25\n50\n75\nFeature 1\n0\n20\n40\n60\n80\nFeature 2\n25\n50\n75\nFeature 1\n20\n40\n60\n80\nFeature 2\n25\n50\n75\nFeature 1\n20\n40\n60\n80\nFeature 2\n(b) Decision boundaries after SFT on linear data of Llama3-8b across 4 unseen tasks.\nFigure 10: Generalization ability of Llama-3-8B after supervised fine-tuning on a single binary linear\nclassification task. The first two columns show the model’s performance on non-linear classification\ntasks before and after fine-tuning, while the last two columns demonstrate its ability to generalize to\n3-class and 4-class classification tasks.\nconditional independence among the queries given the context:\nL(θ) = E\n\"\nN\nX\ni=m+1\nlog p(yi | xi, x1:m, y1:m)\n#\n,\n(3)\nwhere the expectation is with respect to task C, data points {(xi, yi)}N\ni=1, and the number of context\npoints m. TNPs employ a specialized mask to ensure the conditional independence assumption. We\nshowed in Appendix D that transformers trained from sctrach can learn to in-context learn smooth\ndecision boundary. Details are in Appendix D.\nHow to Use Uncertainty-aware Active Learning to Learn Decision Boundaries We investigate\nwhether the decision boundary can be smoothed by providing the LLM with labels of the most\nuncertain points on the grid as additional in-context examples. Uncertainty is measured as the entropy\nof the probability distribution of the two classes after softmax normalization of the logits. Our\nstudy focuses on an active learning scheme where new in-context examples are incrementally added\nbased on the LLM’s current uncertainty. Initially, we obtain the decision boundary conditioned\non the existing in-context examples. To refine this boundary, we query the LLM over a grid and\nselect the top-k most uncertain points, ensuring they are spatially distant from each other using a\ngreedy sampling approach. For labeling these uncertain points, we use a logistic regression model\nwell-trained on a larger dataset with perfect accuracy as the ground truth decision boundary. As\nshown in Figure 11, this uncertainty-aware active sampling method results in a smoother decision\nboundary over iterations compared to random sampling. The iterative refinement enhances the\nmodel’s generalization capabilities, leading to higher test set accuracies and greater sample efficiency,\nrequiring fewer additional in-context examples to achieve performance gains. These findings indicate\nthat leveraging the LLM’s uncertainty measurements is valuable for selecting new in-context examples\nin resource-constrained settings where labeled data is scarce. We show more examples in Appendix I.\n5\nRelated Works\nUnderstanding in-context learning in transformers and LLMs is an active area of research, with\nexisting works approaching this problem from both theoretical and practical perspectives.\nTheoretical understanding of in-context learning Recent works aim to establish a theoretical\nconnection between in-context learning and gradient descent (GD). The pioneering work by Akyürek\net al. proves transformers can implement learning algorithms for linear models based on GD and\nclosed-form ridge regression by construction. Von Oswald et al. [2023] proves the equivalence\nbetween linear self-attention and GD on linear regression by construction. Similarly, Dai et al.\n8\n",
  "9": "0\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\n80\nFeature 2\n32 examples\n Test Accuracy: 0.85\n0\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\n80\nFeature 2\n64 examples\n Test Accuracy: 0.90\n0\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\n80\nFeature 2\n96 examples\n Test Accuracy: 0.94\n0\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\n80\nFeature 2\n128 examples\n Test Accuracy: 0.91\n0\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\n80\nFeature 2\n160 examples\n Test Accuracy: 0.91\n0\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\n80\nFeature 2\n192 examples\n Test Accuracy: 0.89\n0\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\n80\nFeature 2\n224 examples\n Test Accuracy: 0.94\n0\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\n80\nFeature 2\n256 examples\n Test Accuracy: 0.95\n20\n40\n60\n80\nFeature 1\n20\n30\n40\n50\n60\n70\nFeature 2\nUncertainty\n0\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\n80\nFeature 2\nUncertainty\n0\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\n80\nFeature 2\nUncertainty\n0\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\n80\nFeature 2\nUncertainty\n0\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\n80\nFeature 2\nUncertainty\n0\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\n80\nFeature 2\nUncertainty\n0\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\n80\nFeature 2\nUncertainty\n0\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\n80\nFeature 2\nUncertainty\n0.2\n0.3\n0.4\n0.5\n0.6\nClass 1 (In-Context Examples)\nClass 2 (In-Context Examples)\nClass 1 (Model Prediction)\nClass 2 (Model Prediction)\n(a) Decision boundaries with different numbers of context examples when using active sampling.\n0\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\n80\nFeature 2\n32 examples\n Test Accuracy: 0.85\n0\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\n80\nFeature 2\n64 examples\n Test Accuracy: 0.76\n0\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\n80\nFeature 2\n96 examples\n Test Accuracy: 0.81\n0\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\n80\nFeature 2\n128 examples\n Test Accuracy: 0.71\n0\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\n80\nFeature 2\n160 examples\n Test Accuracy: 0.73\n0\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\n80\nFeature 2\n192 examples\n Test Accuracy: 0.70\n0\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\n80\nFeature 2\n224 examples\n Test Accuracy: 0.74\n0\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\n80\nFeature 2\n256 examples\n Test Accuracy: 0.75\n20\n40\n60\n80\nFeature 1\n20\n30\n40\n50\n60\n70\nFeature 2\nUncertainty\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\n80\nFeature 2\nUncertainty\n0\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\n80\nFeature 2\nUncertainty\n0\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\n80\nFeature 2\nUncertainty\n0\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\n80\nFeature 2\nUncertainty\n0\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\n80\nFeature 2\nUncertainty\n0\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\n80\nFeature 2\nUncertainty\n0\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\n80\nFeature 2\nUncertainty\n0.1\n0.2\n0.3\n0.4\n0.5\n0.6\nClass 1 (In-Context Examples)\nClass 2 (In-Context Examples)\nClass 1 (Model Prediction)\nClass 2 (Model Prediction)\n(b) Decision boundaries with different numbers of context examples when using random sampling.\nFigure 11: Comparison of active and random sampling methods. We plot the decision boundaries and\nuncertainty plot across different number of in-context examples from 32 to 256, where the in-context\nexamples are gradually added to the prompt using active or random methods. Active sampling gives\nsmoother decision boundary and the uncertain points lie on it. The test set accuracies is plotted in the\ntitles.\n[2023] shows that attention in transformers has a dual form of GD and views transformers as meta-\noptimizers. Subsequent works extend these ideas to characterize the global optimum of single-layer\nlinear transformers. Ahn et al. [2024] observe that with the optimal parameters, the transformer\nimplements a single step of preconditioned gradient descent, while Zhang et al. [2023] shows that\nat the global optimum, the transformer achieves competitive prediction error with the best linear\npredictor on a new prediction task. In addition to theoretical connections to GD, a complementary\ndirection aims to establish statistical complexity and generalization bounds of in-context learning\nin transformers [Bai et al., 2024, Li et al., 2023b, Wies et al., 2024, Wu et al., 2023]. The common\nlimitation of these existing theoretical frameworks is the reliance on strong assumptions about the\ntransformer architecture or the functional form of the in-context learning tasks which may not reflect\nreal-world practices.\nPractical understanding of in-context learning More relevant to our paper is a line of works\nfocusing on understanding the practical aspects of in-context learning in LLMs. Many existing works\ninvestigate the roles of in-context examples and prompts. Min et al. [2022b] show a surprising result\nthat ground-truth demonstrations are not required for in-context learning, while other factors such as\nthe label space, input text distribution, and overall sequence format play an important role. Shi et al.\n[2023] investigate the distractibility of LLMs and shows that their performance dramatically drops\nwhen irrelevant context is included. Subsequently, Wei et al. [2023] characterize these behaviors of\nLLMs with respect to model size, and show that larger language models perform in-context learning\ndifferently in the presence of flipped or semantically unrelated labels. Webson and Pavlick [2022]\nargue against the current practice of prompt engineering, showing that intentionally irrelevant or even\npathologically misleading prompts achieve similar downstream performance to instructively good\nprompts. Orthogonally, Lampinen et al. [2022] find that including explanations in the in-context\n9\n",
  "10": "examples significantly improves the few-shot performance of LLMs. Finally, given the expanded\ncontext windows of modern LLMs, recent works have explored in-context learning in the many-shot\nsetting with hundreds or thousands of examples [Agarwal et al., 2024, Li et al., 2023a, Bertsch et al.,\n2024].\nLearning to learn in-context In contrast to the emergent in-context capabilities of LLMs, existing\nworks have also studied methods that learn to perform in-context learning explicitly. Min et al. [2022a]\npropose MetaICL, a meta-training framework for finetuning pretrained LLMs to perform in-context\nlearning on a large and diverse collection of tasks. MetaICL outperforms several baselines including\nemergent in-context learning and multi-task learning followed by zero-shot transfer. Beyond text,\nTNP [Nguyen and Grover, 2022, Nguyen et al., 2023, Nguyen and Grover, 2024] and PFNs [Müller\net al., 2021] propose to train transformer models to perform in-context prediction for a family of\nfunctions, which allows in-context generalization to unseen functions after training. Similarly, Garg\net al. [2022] show that autoregressive transformers can be trained from scratch to learn function\nclasses such as linear functions and 2-layer ReLU networks. Other work also shows that alignment\ncan be done in-context [Zhao et al., 2023], where in-context learned reward model can be used for\ninference-time preference alignment. These works present an interesting set of baselines for our work\nto examine the in-context learning ability of LLMs.\n6\nConclusion\nWe propose a novel approach to understanding in-context learning in LLMs by probing their decision\nboundaries in in-context learning in binary classification tasks. Despite achieving high test accuracy,\nwe observe that the decision boundaries of LLMs are often irregularly non-smooth. Through extensive\nexperiments, we identify factors that affect this decision boundary. We also explore fine-tuning and\nadaptive sampling methods, finding them effective in improving boundary smoothness. Our findings\nprovide new insights into the mechanics of in-context learning and suggest pathways for further\nresearch and optimization.\nAcknowledgments\nThis research is supported by NSF CAREER Award 2341040, Schmidt Sciences AI2050 Fellowship,\nSamsung, and Cisco.\n10\n",
  "11": "References\nJ. Achiam, S. Adler, S. Agarwal, L. Ahmad, I. Akkaya, F. L. Aleman, D. Almeida, J. Altenschmidt,\nS. Altman, S. Anadkat, et al. Gpt-4 technical report. arXiv preprint arXiv:2303.08774, 2023.\nR. Agarwal, A. Singh, L. M. Zhang, B. Bohnet, S. Chan, A. Anand, Z. Abbas, A. Nova, J. D.\nCo-Reyes, E. Chu, et al. Many-shot in-context learning. arXiv preprint arXiv:2404.11018, 2024.\nK. Ahn, X. Cheng, H. Daneshmand, and S. Sra. Transformers learn to implement preconditioned\ngradient descent for in-context learning. Advances in Neural Information Processing Systems, 36,\n2024.\nE. Akyürek, D. Schuurmans, J. Andreas, T. Ma, and D. Zhou. What learning algorithm is in-context\nlearning? investigations with linear models. In The Eleventh International Conference on Learning\nRepresentations.\nY. Bai, F. Chen, H. Wang, C. Xiong, and S. Mei. Transformers as statisticians: Provable in-context\nlearning with in-context algorithm selection. Advances in neural information processing systems,\n36, 2024.\nA. Bertsch, M. Ivgi, U. Alon, J. Berant, M. R. Gormley, and G. Neubig. In-context learning with\nlong-context models: An in-depth exploration. arXiv preprint arXiv:2405.00200, 2024.\nT. Brown, B. Mann, N. Ryder, M. Subbiah, J. D. Kaplan, P. Dhariwal, A. Neelakantan, P. Shyam,\nG. Sastry, A. Askell, et al. Language models are few-shot learners. Advances in neural information\nprocessing systems, 33:1877–1901, 2020.\nX. Chen, R. A. Chi, X. Wang, and D. Zhou. Premise order matters in reasoning with large language\nmodels. arXiv preprint arXiv:2402.08939, 2024.\nA. Conneau and D. Kiela. Senteval: An evaluation toolkit for universal sentence representations.\narXiv preprint arXiv:1803.05449, 2018.\nD. Dai, Y. Sun, L. Dong, Y. Hao, S. Ma, Z. Sui, and F. Wei. Why can gpt learn in-context? language\nmodels secretly perform gradient descent as meta-optimizers. In Findings of the Association for\nComputational Linguistics: ACL 2023, pages 4005–4019, 2023.\nT. Dettmers, M. Lewis, Y. Belkada, and L. Zettlemoyer. Llm.int8(): 8-bit matrix multiplication for\ntransformers at scale, 2022.\nS. Garg, D. Tsipras, P. S. Liang, and G. Valiant. What can transformers learn in-context? a case study\nof simple function classes. Advances in Neural Information Processing Systems, 35:30583–30598,\n2022.\nE. J. Hu, P. Wallis, Z. Allen-Zhu, Y. Li, S. Wang, L. Wang, W. Chen, et al. Lora: Low-rank adaptation\nof large language models. In International Conference on Learning Representations, 2021.\nA. Q. Jiang, A. Sablayrolles, A. Mensch, C. Bamford, D. S. Chaplot, D. d. l. Casas, F. Bressand,\nG. Lengyel, G. Lample, L. Saulnier, et al. Mistral 7b. arXiv preprint arXiv:2310.06825, 2023.\nJ. Kaplan, S. McCandlish, T. Henighan, T. B. Brown, B. Chess, R. Child, S. Gray, A. Radford, J. Wu,\nand D. Amodei. Scaling laws for neural language models. arXiv preprint arXiv:2001.08361, 2020.\nA. Lampinen, I. Dasgupta, S. Chan, K. Mathewson, M. Tessler, A. Creswell, J. McClelland, J. Wang,\nand F. Hill. Can language models learn from explanations in context? In Findings of the Association\nfor Computational Linguistics: EMNLP 2022, pages 537–563, 2022.\nM. Li, S. Gong, J. Feng, Y. Xu, J. Zhang, Z. Wu, and L. Kong. In-context learning with many\ndemonstration examples. arXiv preprint arXiv:2302.04931, 2023a.\nY. Li, M. E. Ildiz, D. Papailiopoulos, and S. Oymak. Transformers as algorithms: Generalization\nand stability in in-context learning. In International Conference on Machine Learning, pages\n19565–19594. PMLR, 2023b.\n11\n",
  "12": "P. Malo, A. Sinha, P. Korhonen, J. Wallenius, and P. Takala. Good debt or bad debt: Detecting\nsemantic orientations in economic texts. Journal of the Association for Information Science and\nTechnology, 65(4):782–796, 2014.\nS. Min, M. Lewis, L. Zettlemoyer, and H. Hajishirzi. Metaicl: Learning to learn in context. In Proceed-\nings of the 2022 Conference of the North American Chapter of the Association for Computational\nLinguistics: Human Language Technologies, pages 2791–2809, 2022a.\nS. Min, X. Lyu, A. Holtzman, M. Artetxe, M. Lewis, H. Hajishirzi, and L. Zettlemoyer. Rethinking\nthe role of demonstrations: What makes in-context learning work? In Proceedings of the 2022\nConference on Empirical Methods in Natural Language Processing, pages 11048–11064, 2022b.\nI. Mollas, Z. Chrysopoulou, S. Karlos, and G. Tsoumakas. Ethos: an online hate speech detection\ndataset. arXiv preprint arXiv:2006.08328, 2020.\nS. Müller, N. Hollmann, S. P. Arango, J. Grabocka, and F. Hutter. Transformers can do bayesian\ninference. In International Conference on Learning Representations, 2021.\nT. Nguyen and A. Grover. Transformer neural processes: Uncertainty-aware meta learning via\nsequence modeling. In International Conference on Machine Learning, pages 16569–16594.\nPMLR, 2022.\nT. Nguyen and A. Grover. Lico: Large language models for in-context molecular optimization. arXiv\npreprint arXiv:2406.18851, 2024.\nT. Nguyen, S. Agrawal, and A. Grover. Expt: Synthetic pretraining for few-shot experimental design.\nAdvances in Neural Information Processing Systems, 36:45856–45869, 2023.\nF. Pedregosa, G. Varoquaux, A. Gramfort, V. Michel, B. Thirion, O. Grisel, M. Blondel, P. Pretten-\nhofer, R. Weiss, V. Dubourg, J. Vanderplas, A. Passos, D. Cournapeau, M. Brucher, M. Perrot, and\nE. Duchesnay. Scikit-learn: Machine learning in Python. Journal of Machine Learning Research,\n12:2825–2830, 2011.\nM. Reid, N. Savinov, D. Teplyashin, D. Lepikhin, T. Lillicrap, J.-b. Alayrac, R. Soricut, A. Lazaridou,\nO. Firat, J. Schrittwieser, et al. Gemini 1.5: Unlocking multimodal understanding across millions\nof tokens of context. arXiv preprint arXiv:2403.05530, 2024.\nF. Shi, X. Chen, K. Misra, N. Scales, D. Dohan, E. H. Chi, N. Schärli, and D. Zhou. Large language\nmodels can be easily distracted by irrelevant context. In International Conference on Machine\nLearning, pages 31210–31227. PMLR, 2023.\nR. Socher, A. Perelygin, J. Wu, J. Chuang, C. D. Manning, A. Y. Ng, and C. Potts. Recursive deep\nmodels for semantic compositionality over a sentiment treebank. In Proceedings of the 2013\nconference on empirical methods in natural language processing, pages 1631–1642, 2013.\nH. Touvron, L. Martin, K. Stone, P. Albert, A. Almahairi, Y. Babaei, N. Bashlykov, S. Batra,\nP. Bhargava, S. Bhosale, et al. Llama 2: Open foundation and fine-tuned chat models. arXiv\npreprint arXiv:2307.09288, 2023.\nJ. Von Oswald, E. Niklasson, E. Randazzo, J. Sacramento, A. Mordvintsev, A. Zhmoginov, and\nM. Vladymyrov. Transformers learn in-context by gradient descent. In International Conference\non Machine Learning, pages 35151–35174. PMLR, 2023.\nA. Wang, Y. Pruksachatkun, N. Nangia, A. Singh, J. Michael, F. Hill, O. Levy, and S. Bowman.\nSuperglue: A stickier benchmark for general-purpose language understanding systems. Advances\nin neural information processing systems, 32, 2019.\nA. Webson and E. Pavlick. Do prompt-based models really understand the meaning of their prompts?\nIn Proceedings of the 2022 Conference of the North American Chapter of the Association for\nComputational Linguistics: Human Language Technologies, pages 2300–2344, 2022.\nJ. Wei, Y. Tay, R. Bommasani, C. Raffel, B. Zoph, S. Borgeaud, D. Yogatama, M. Bosma, D. Zhou,\nD. Metzler, et al. Emergent abilities of large language models. Transactions on Machine Learning\nResearch, 2022.\n12\n",
  "13": "J. Wei, J. Wei, Y. Tay, D. Tran, A. Webson, Y. Lu, X. Chen, H. Liu, D. Huang, D. Zhou, et al. Larger\nlanguage models do in-context learning differently. arXiv preprint arXiv:2303.03846, 2023.\nN. Wies, Y. Levine, and A. Shashua. The learnability of in-context learning. Advances in Neural\nInformation Processing Systems, 36, 2024.\nJ. Wu, D. Zou, Z. Chen, V. Braverman, Q. Gu, and P. Bartlett. How many pretraining tasks are needed\nfor in-context learning of linear regression? In The Twelfth International Conference on Learning\nRepresentations, 2023.\nM. Xia, T. Gao, Z. Zeng, and D. Chen. Sheared llama: Accelerating language model pre-training via\nstructured pruning. arXiv preprint arXiv:2310.06694, 2023.\nR. Zhang, S. Frei, and P. L. Bartlett. Trained transformers learn linear models in-context. arXiv\npreprint arXiv:2306.09927, 2023.\nX. Zhang, J. Zhao, and Y. LeCun. Character-level convolutional networks for text classification.\nAdvances in neural information processing systems, 28, 2015.\nS. Zhao, J. Dang, and A. Grover. Group preference optimization: Few-shot alignment of large\nlanguage models. arXiv preprint arXiv:2310.11523, 2023.\n13\n",
  "14": "A\nPretrained LLMs decision boundary on linear and non-linear classification\ntasks\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\nSheared-LLama-1.3B\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\nLLama-2-7B\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\nMistral-7B-v0.1\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\nLLama-3-8B\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\nLLama-2-13B\n20\n40\n60\n80\nFeature 1\n20\n30\n40\n50\n60\n70\n80\n90\nFeature 2\nSheared-LLama-1.3B\n20\n40\n60\n80\nFeature 1\n20\n30\n40\n50\n60\n70\n80\n90\nFeature 2\nLLama-2-7B\n20\n40\n60\n80\nFeature 1\n20\n30\n40\n50\n60\n70\n80\n90\nFeature 2\nMistral-7B-v0.1\n20\n40\n60\n80\nFeature 1\n20\n30\n40\n50\n60\n70\n80\n90\nFeature 2\nLLama-3-8B\n20\n40\n60\n80\nFeature 1\n20\n30\n40\n50\n60\n70\n80\n90\nFeature 2\nLLama-2-13B\n0\n20\n40\n60\n80\nFeature 1\n0\n20\n40\n60\n80\nFeature 2\nSheared-LLama-1.3B\n0\n20\n40\n60\n80\nFeature 1\n0\n20\n40\n60\n80\nFeature 2\nLLama-2-7B\n0\n20\n40\n60\n80\nFeature 1\n0\n20\n40\n60\n80\nFeature 2\nMistral-7B-v0.1\n0\n20\n40\n60\n80\nFeature 1\n0\n20\n40\n60\n80\nFeature 2\nLLama-3-8B\n0\n20\n40\n60\n80\nFeature 1\n0\n20\n40\n60\n80\nFeature 2\nLLama-2-13B\nFigure 12: Visualizations of decision boundaries for various LLMs, ranging in size from 1.3B to 13B,\non three classification tasks. The tasks are, from top to bottom, circle, linear, and moon classifications.\nNote that the circle and moon tasks are not linearly separable. The in-context data points are shown as\nscatter points and the colors indicate the label determined by each model. These decision boundaries\nare obtained using 128 in-context examples. The visualization highlights that the decision boundaries\nof these language models are not smooth.\nB\nFinetune on in-context examples only\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\nFinetuned on \nin-context examples\n20\n40\n60\n80\nFeature 1\n0\n20\n40\n60\n80\nFeature 2\nFinetuned on \nin-context examples\nFigure 13: Two examples of Llama2-7B finetuned on the in-context examples points, which are\nscattered points in the plot.\n14\n",
  "15": "C\nSFT LLMs for in-context classification\nWe used LoRA [Hu et al., 2021] to supervise fine-tune the Llama series models on both non-linear\nand linear classification tasks, including circle, linear, and moon datasets. The models fine-tuned\nare Sheared-Llama-1.3B, Llama2-7B, Llama2-13B, and Llama3-8B. Visualization in Figure 14\ndemonstrates that these language models produce smoother decision boundaries after training on the\nclassification datasets using SFT.\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\nLLama-2-7B\n0\n20\n40\n60\n80\nFeature 1\n0\n20\n40\n60\n80\nFeature 2\nLLama-2-7B\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\nLLama-2-7B\n0\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\nLLama-2-7B\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\nLLama-3-8B\n0\n20\n40\n60\n80\nFeature 1\n0\n20\n40\n60\n80\nFeature 2\nLLama-3-8B\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\nLLama-3-8B\n0\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\nLLama-3-8B\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\nLLama-2-13B\n0\n20\n40\n60\n80\nFeature 1\n0\n20\n40\n60\n80\nFeature 2\nLLama-2-13B\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\nLLama-2-13B\n0\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\nLLama-2-13B\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\nSheared-LLama-1.3B\n0\n20\n40\n60\n80\nFeature 1\n0\n20\n40\n60\n80\nFeature 2\nSheared-LLama-1.3B\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\nSheared-LLama-1.3B\n0\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\nSheared-LLama-1.3B\nSupervised Fine-tuned LLMs\nFigure 14: Decision boundary of in-context learning on 128 examples across Llama series models\nafter supervised finetuning with LoRA.\n15\n",
  "16": "D\nTraining Transformers from Scratch: TNP models decision boundaries\nWe trained TNP models of four different sizes as shown in the Table 1 below. We plot how does\nthe TNP models decision boudnary changes as more in-context examples are added in Figure 15.\nTNP models learn smooth deicision boundary for this moon-shaped non-linear task. And we did not\nobserve a scaling law of transformer sizes versus the decision boundary smoothness. In contrast the\nsmaller model generalize better than the larger model.\nTable 1: TNP transformers model sizes and architectures.\nModel\nParameters (M)\nInput embed dim\nfeedforward dim\nnum heads\nnum layers\nSmall\n0.1\n64\n64\n2\n3\nMedium\n0.6\n128\n128\n4\n6\nLarge\n1.6\n128\n256\n8\n12\nX-Large\n9.7\n256\n512\n16\n18\n20\n30\n40\n50\n60\n70\nFeature 1\n20\n40\n60\n80\nX-Large\n8 examples\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\n16 examples\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\n32 examples\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\n64 examples\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\n128 examples\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\n256 examples\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\n512 examples\n20\n30\n40\n50\n60\n70\nFeature 1\n20\n40\n60\n80\nLarge\n8 examples\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\n16 examples\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\n32 examples\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\n64 examples\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\n128 examples\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\n256 examples\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\n512 examples\n20\n30\n40\n50\n60\n70\nFeature 1\n20\n40\n60\n80\nMedium\n8 examples\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\n16 examples\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\n32 examples\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\n64 examples\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\n128 examples\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\n256 examples\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\n512 examples\n20\n30\n40\n50\n60\n70\nFeature 1\n20\n40\n60\n80\nSmall\n8 examples\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\n16 examples\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\n32 examples\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\n64 examples\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\n128 examples\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\n256 examples\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\n512 examples\nFigure 15: Decision boundary of TNP models of different sizes trained from scratch.\nE\nTraditional Classifiers Model Details\nIn our experiments, we used several classical machine learning models with the following hyperpa-\nrameters:\n• Decision Tree Classifier: We set the maximum depth of the tree to 3.\n• Multi-Layer Perceptron: The neural network consists of two hidden layers, each with 256\nneurons, and the maximum number of iterations is set to 1000.\n• K-Nearest Neighbors: The number of neighbors is set to 5.\n• Support Vector Machine (SVM): We used a radial basis function (RBF) kernel with a\ngamma value of 0.2.\n16\n",
  "17": "F\nPrompt Format for binary classification\nGiven pairs of numbers and their labels, predict the label for a new\ninput pair of numbers based on the provided data.\nAnswer with only one of the labels ‘Foo’ and ‘Bar’:\nInput:\n64 24\nLabel:\nBar\nInput:\n34 41\nLabel:\nBar\nInput:\n71 66\nLabel:\nBar\n...\nInput:\n96 49\nLabel:\nFoo\nInput:\n21 56\nLabel:\nFoo\nWhat is the label for this input?\nInput:\n2 3\nLabel:\nFigure 16: Few-shot in-context prompt with n context questions.\nG\nClassification Datasets\nWe use three types of classification tasks from scikit-learn [Pedregosa et al., 2011] to probe the\ndecision boundary of LLMs and transformers: linear, circle, and moon classification problems. For\nlinear classification tasks, we utilize the make_classification function, which generates random\nclassification problems by creating clusters of points normally distributed around the vertices of a\nhypercube with sides of length 2 × class_sep. Circle classification tasks are generated using the\nmake_circles function, creating a binary classification problem with a large circle containing a\nsmaller circle. The factor parameter controls the scale of the inner circle relative to the outer\ncircle. Moon classification tasks are generated using the make_moons function, creating a binary\nclassification problem with two interleaving half circles. The noise parameter controls the standard\ndeviation of Gaussian noise added to the data points.\nFor training tasks, the class_sep parameter is randomly sampled from the range [1.5, 2], and the\nfactor parameter for circular tasks is sampled from [0.1, 0.4]. For testing tasks, the class_sep\nparameter is sampled from [1, 1.4], and the factor parameter from [0.5, 0.9], ensuring that testing\ntasks differ from training tasks. The noise parameter for moon-shaped tasks is sampled from\n[0.05, 0.1] for training and [0.1, 0.2] for testing, introducing varying levels of complexity in the\nclassification problems.\nH\nDecision Boundary of LLMs on NLP tasks.\nWe extend our analysis to multi-class NLP classification tasks using high-dimensional real-world\ndatasets. To address the challenge of visualizing high-dimensional text embeddings, we project them\nonto a 2D space using t-SNE and send the 2D embeddings as input in the prompt to the LLM. While\nany dimensionality reduction technique inevitably introduces confounding factors, this approach\nallows us to extend our analysis to more complex, real-world scenarios. Our experiments encompass\nsix widely-used NLP classification tasks, covering both binary and multi-class settings. These include\nSubjective/Obejective sentence classification (SUBJ) [Conneau and Kiela, 2018], financial sentiment\nanalysis (FP) [Malo et al., 2014], textual entailment recognition (RTE) [Wang et al., 2019], hate\nspeech detection (ETHOS) [Mollas et al., 2020], sentiment analysis (SST-2) [Socher et al., 2013]\n17\n",
  "18": "and news topic classification (AG_NEWS) [Zhang et al., 2015]. The results, presented in Figure 17,\ndemonstrate that the non-smooth decision boundary characteristics observed in our synthetic datasets\npersist in these more complex NLP tasks.\nFigure 17: Decision boundaries of Llama-3-8b on six NLP tasks, ranging from binary to multi-class\nclassification. Since text embeddings are natively high-dimensional, we projected text embeddings\nonto a 2D space using t-SNE. The irregular, non-smooth behaviors are also seen in these tasks.\nI\nUncertainty Aware Active Sampling For Smoother Decision Boundary and\nBetter Test set Accuracy\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\nFeature 2\n32 examples\n Test Accuracy: 0.88\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\nFeature 2\n64 examples\n Test Accuracy: 0.81\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\nFeature 2\n96 examples\n Test Accuracy: 0.80\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\nFeature 2\n128 examples\n Test Accuracy: 0.85\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\nFeature 2\n160 examples\n Test Accuracy: 0.86\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\nFeature 2\n192 examples\n Test Accuracy: 0.85\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\nFeature 2\n224 examples\n Test Accuracy: 0.92\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\nFeature 2\n256 examples\n Test Accuracy: 0.96\n20\n40\n60\n80\n100\nFeature 1\n10\n20\n30\n40\n50\n60\n70\nFeature 2\nUncertainty\n20\n40\n60\n80\n100\nFeature 1\n10\n20\n30\n40\n50\n60\n70\nFeature 2\nUncertainty\n20\n40\n60\n80\n100\nFeature 1\n10\n20\n30\n40\n50\n60\n70\nFeature 2\nUncertainty\n20\n40\n60\n80\n100\nFeature 1\n10\n20\n30\n40\n50\n60\n70\nFeature 2\nUncertainty\n20\n40\n60\n80\n100\nFeature 1\n10\n20\n30\n40\n50\n60\n70\nFeature 2\nUncertainty\n20\n40\n60\n80\n100\nFeature 1\n10\n20\n30\n40\n50\n60\n70\nFeature 2\nUncertainty\n20\n40\n60\n80\n100\nFeature 1\n10\n20\n30\n40\n50\n60\n70\nFeature 2\nUncertainty\n20\n40\n60\n80\n100\nFeature 1\n10\n20\n30\n40\n50\n60\n70\nFeature 2\nUncertainty\n0.3\n0.4\n0.5\n0.6\nClass 1 (In-Context Examples)\nClass 2 (In-Context Examples)\nClass 1 (Model Prediction)\nClass 2 (Model Prediction)\n(a) Active sampling\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\nFeature 2\n32 examples\n Test Accuracy: 0.88\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\nFeature 2\n64 examples\n Test Accuracy: 0.86\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\nFeature 2\n96 examples\n Test Accuracy: 0.85\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\nFeature 2\n128 examples\n Test Accuracy: 0.83\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\nFeature 2\n160 examples\n Test Accuracy: 0.84\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\nFeature 2\n192 examples\n Test Accuracy: 0.84\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\nFeature 2\n224 examples\n Test Accuracy: 0.84\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\nFeature 2\n256 examples\n Test Accuracy: 0.88\n20\n40\n60\n80\n100\nFeature 1\n10\n20\n30\n40\n50\n60\n70\nFeature 2\nUncertainty\n20\n40\n60\n80\n100\nFeature 1\n10\n20\n30\n40\n50\n60\n70\nFeature 2\nUncertainty\n20\n40\n60\n80\n100\nFeature 1\n10\n20\n30\n40\n50\n60\n70\nFeature 2\nUncertainty\n20\n40\n60\n80\n100\nFeature 1\n10\n20\n30\n40\n50\n60\n70\nFeature 2\nUncertainty\n20\n40\n60\n80\n100\nFeature 1\n10\n20\n30\n40\n50\n60\n70\nFeature 2\nUncertainty\n20\n40\n60\n80\n100\nFeature 1\n10\n20\n30\n40\n50\n60\n70\nFeature 2\nUncertainty\n20\n40\n60\n80\n100\nFeature 1\n10\n20\n30\n40\n50\n60\n70\nFeature 2\nUncertainty\n20\n40\n60\n80\n100\nFeature 1\n10\n20\n30\n40\n50\n60\n70\nFeature 2\nUncertainty\n0.2\n0.3\n0.4\n0.5\n0.6\nClass 1 (In-Context Examples)\nClass 2 (In-Context Examples)\nClass 1 (Model Prediction)\nClass 2 (Model Prediction)\n(b) Random sampling\nFigure 18: Comparison of active and random sampling methods.\n18\n",
  "19": "20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\n80\n90\nFeature 2\n32 examples\n Test Accuracy: 0.96\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\n80\n90\nFeature 2\n64 examples\n Test Accuracy: 0.96\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\n80\n90\nFeature 2\n96 examples\n Test Accuracy: 0.97\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\n80\n90\nFeature 2\n128 examples\n Test Accuracy: 0.94\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\n80\n90\nFeature 2\n160 examples\n Test Accuracy: 0.98\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\n80\n90\nFeature 2\n192 examples\n Test Accuracy: 0.98\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\n80\n90\nFeature 2\n224 examples\n Test Accuracy: 0.98\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\n80\n90\nFeature 2\n256 examples\n Test Accuracy: 0.96\n20\n40\n60\n80\nFeature 1\n20\n30\n40\n50\n60\n70\n80\n90\nFeature 2\nUncertainty\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\nUncertainty\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\nUncertainty\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\nUncertainty\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\nUncertainty\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\nUncertainty\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\nUncertainty\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\nUncertainty\n0.30\n0.35\n0.40\n0.45\n0.50\n0.55\n0.60\n0.65\nClass 1 (In-Context Examples)\nClass 2 (In-Context Examples)\nClass 1 (Model Prediction)\nClass 2 (Model Prediction)\n(a) Active sampling\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\n80\n90\nFeature 2\n32 examples\n Test Accuracy: 0.96\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\n80\n90\nFeature 2\n64 examples\n Test Accuracy: 0.95\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\n80\n90\nFeature 2\n96 examples\n Test Accuracy: 0.96\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\n80\n90\nFeature 2\n128 examples\n Test Accuracy: 0.99\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\n80\n90\nFeature 2\n160 examples\n Test Accuracy: 0.97\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\n80\n90\nFeature 2\n192 examples\n Test Accuracy: 1.00\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\n80\n90\nFeature 2\n224 examples\n Test Accuracy: 1.00\n20\n40\n60\n80\nFeature 1\n10\n20\n30\n40\n50\n60\n70\n80\n90\nFeature 2\n256 examples\n Test Accuracy: 0.97\n20\n40\n60\n80\nFeature 1\n20\n30\n40\n50\n60\n70\n80\n90\nFeature 2\nUncertainty\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\nUncertainty\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\nUncertainty\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\nUncertainty\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\nUncertainty\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\nUncertainty\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\nUncertainty\n20\n40\n60\n80\nFeature 1\n20\n40\n60\n80\nFeature 2\nUncertainty\n0.2\n0.3\n0.4\n0.5\n0.6\nClass 1 (In-Context Examples)\nClass 2 (In-Context Examples)\nClass 1 (Model Prediction)\nClass 2 (Model Prediction)\n(b) Random sampling\nFigure 19: Comparison of active and random sampling methods.\n19\n",
  "20": "NeurIPS Paper Checklist\n1. Claims\nQuestion: Do the main claims made in the abstract and introduction accurately reflect the\npaper’s contributions and scope?\nAnswer: [Yes]\nJustification: It reflects our proposed method and experimental findings.\nGuidelines:\n• The answer NA means that the abstract and introduction do not include the claims\nmade in the paper.\n• The abstract and/or introduction should clearly state the claims made, including the\ncontributions made in the paper and important assumptions and limitations. A No or\nNA answer to this question will not be perceived well by the reviewers.\n• The claims made should match theoretical and experimental results, and reflect how\nmuch the results can be expected to generalize to other settings.\n• It is fine to include aspirational goals as motivation as long as it is clear that these goals\nare not attained by the paper.\n2. Limitations\nQuestion: Does the paper discuss the limitations of the work performed by the authors?\nAnswer: [Yes]\nJustification: We provide limitation in the appendix section.\nGuidelines:\n• The answer NA means that the paper has no limitation while the answer No means that\nthe paper has limitations, but those are not discussed in the paper.\n• The authors are encouraged to create a separate \"Limitations\" section in their paper.\n• The paper should point out any strong assumptions and how robust the results are to\nviolations of these assumptions (e.g., independence assumptions, noiseless settings,\nmodel well-specification, asymptotic approximations only holding locally). The authors\nshould reflect on how these assumptions might be violated in practice and what the\nimplications would be.\n• The authors should reflect on the scope of the claims made, e.g., if the approach was\nonly tested on a few datasets or with a few runs. In general, empirical results often\ndepend on implicit assumptions, which should be articulated.\n• The authors should reflect on the factors that influence the performance of the approach.\nFor example, a facial recognition algorithm may perform poorly when image resolution\nis low or images are taken in low lighting. Or a speech-to-text system might not be\nused reliably to provide closed captions for online lectures because it fails to handle\ntechnical jargon.\n• The authors should discuss the computational efficiency of the proposed algorithms\nand how they scale with dataset size.\n• If applicable, the authors should discuss possible limitations of their approach to\naddress problems of privacy and fairness.\n• While the authors might fear that complete honesty about limitations might be used by\nreviewers as grounds for rejection, a worse outcome might be that reviewers discover\nlimitations that aren’t acknowledged in the paper. The authors should use their best\njudgment and recognize that individual actions in favor of transparency play an impor-\ntant role in developing norms that preserve the integrity of the community. Reviewers\nwill be specifically instructed to not penalize honesty concerning limitations.\n3. Theory Assumptions and Proofs\nQuestion: For each theoretical result, does the paper provide the full set of assumptions and\na complete (and correct) proof?\nAnswer: [NA]\n20\n",
  "21": "Justification: The paper does not include theoretical studies.\nGuidelines:\n• The answer NA means that the paper does not include theoretical results.\n• All the theorems, formulas, and proofs in the paper should be numbered and cross-\nreferenced.\n• All assumptions should be clearly stated or referenced in the statement of any theorems.\n• The proofs can either appear in the main paper or the supplemental material, but if\nthey appear in the supplemental material, the authors are encouraged to provide a short\nproof sketch to provide intuition.\n• Inversely, any informal proof provided in the core of the paper should be complemented\nby formal proofs provided in appendix or supplemental material.\n• Theorems and Lemmas that the proof relies upon should be properly referenced.\n4. Experimental Result Reproducibility\nQuestion: Does the paper fully disclose all the information needed to reproduce the main ex-\nperimental results of the paper to the extent that it affects the main claims and/or conclusions\nof the paper (regardless of whether the code and data are provided or not)?\nAnswer: [Yes]\nJustification: We present complete method and experiment details in Section 3 and 4.\nGuidelines:\n• The answer NA means that the paper does not include experiments.\n• If the paper includes experiments, a No answer to this question will not be perceived\nwell by the reviewers: Making the paper reproducible is important, regardless of\nwhether the code and data are provided or not.\n• If the contribution is a dataset and/or model, the authors should describe the steps taken\nto make their results reproducible or verifiable.\n• Depending on the contribution, reproducibility can be accomplished in various ways.\nFor example, if the contribution is a novel architecture, describing the architecture fully\nmight suffice, or if the contribution is a specific model and empirical evaluation, it may\nbe necessary to either make it possible for others to replicate the model with the same\ndataset, or provide access to the model. In general. releasing code and data is often\none good way to accomplish this, but reproducibility can also be provided via detailed\ninstructions for how to replicate the results, access to a hosted model (e.g., in the case\nof a large language model), releasing of a model checkpoint, or other means that are\nappropriate to the research performed.\n• While NeurIPS does not require releasing code, the conference does require all submis-\nsions to provide some reasonable avenue for reproducibility, which may depend on the\nnature of the contribution. For example\n(a) If the contribution is primarily a new algorithm, the paper should make it clear how\nto reproduce that algorithm.\n(b) If the contribution is primarily a new model architecture, the paper should describe\nthe architecture clearly and fully.\n(c) If the contribution is a new model (e.g., a large language model), then there should\neither be a way to access this model for reproducing the results or a way to reproduce\nthe model (e.g., with an open-source dataset or instructions for how to construct\nthe dataset).\n(d) We recognize that reproducibility may be tricky in some cases, in which case\nauthors are welcome to describe the particular way they provide for reproducibility.\nIn the case of closed-source models, it may be that access to the model is limited in\nsome way (e.g., to registered users), but it should be possible for other researchers\nto have some path to reproducing or verifying the results.\n5. Open access to data and code\nQuestion: Does the paper provide open access to the data and code, with sufficient instruc-\ntions to faithfully reproduce the main experimental results, as described in supplemental\nmaterial?\n21\n",
  "22": "Answer: [Yes]\nJustification: All code and checkpoints will be released publicly upon acceptance.\nGuidelines:\n• The answer NA means that paper does not include experiments requiring code.\n• Please see the NeurIPS code and data submission guidelines (https://nips.cc/\npublic/guides/CodeSubmissionPolicy) for more details.\n• While we encourage the release of code and data, we understand that this might not be\npossible, so “No” is an acceptable answer. Papers cannot be rejected simply for not\nincluding code, unless this is central to the contribution (e.g., for a new open-source\nbenchmark).\n• The instructions should contain the exact command and environment needed to run to\nreproduce the results. See the NeurIPS code and data submission guidelines (https:\n//nips.cc/public/guides/CodeSubmissionPolicy) for more details.\n• The authors should provide instructions on data access and preparation, including how\nto access the raw data, preprocessed data, intermediate data, and generated data, etc.\n• The authors should provide scripts to reproduce all experimental results for the new\nproposed method and baselines. If only a subset of experiments are reproducible, they\nshould state which ones are omitted from the script and why.\n• At submission time, to preserve anonymity, the authors should release anonymized\nversions (if applicable).\n• Providing as much information as possible in supplemental material (appended to the\npaper) is recommended, but including URLs to data and code is permitted.\n6. Experimental Setting/Details\nQuestion: Does the paper specify all the training and test details (e.g., data splits, hyper-\nparameters, how they were chosen, type of optimizer, etc.) necessary to understand the\nresults?\nAnswer: [Yes]\nJustification: We present complete method and experiment details in Section 3 and 4.\nGuidelines:\n• The answer NA means that the paper does not include experiments.\n• The experimental setting should be presented in the core of the paper to a level of detail\nthat is necessary to appreciate the results and make sense of them.\n• The full details can be provided either with the code, in appendix, or as supplemental\nmaterial.\n7. Experiment Statistical Significance\nQuestion: Does the paper report error bars suitably and correctly defined or other appropriate\ninformation about the statistical significance of the experiments?\nAnswer: [Yes]\nJustification: Although we do not provide error bar for every plot, this is due to the nature of\nour work, since we are visualizing the decision boundary for qualitative understanding. We\njustify this with additional plots in various settings in the appendix. Apart from the decision\nboundary plots, we do plot the accuracy plot with error bar.\nGuidelines:\n• The answer NA means that the paper does not include experiments.\n• The authors should answer \"Yes\" if the results are accompanied by error bars, confi-\ndence intervals, or statistical significance tests, at least for the experiments that support\nthe main claims of the paper.\n• The factors of variability that the error bars are capturing should be clearly stated (for\nexample, train/test split, initialization, random drawing of some parameter, or overall\nrun with given experimental conditions).\n• The method for calculating the error bars should be explained (closed form formula,\ncall to a library function, bootstrap, etc.)\n22\n",
  "23": "• The assumptions made should be given (e.g., Normally distributed errors).\n• It should be clear whether the error bar is the standard deviation or the standard error\nof the mean.\n• It is OK to report 1-sigma error bars, but one should state it. The authors should\npreferably report a 2-sigma error bar than state that they have a 96% CI, if the hypothesis\nof Normality of errors is not verified.\n• For asymmetric distributions, the authors should be careful not to show in tables or\nfigures symmetric error bars that would yield results that are out of range (e.g. negative\nerror rates).\n• If error bars are reported in tables or plots, The authors should explain in the text how\nthey were calculated and reference the corresponding figures or tables in the text.\n8. Experiments Compute Resources\nQuestion: For each experiment, does the paper provide sufficient information on the com-\nputer resources (type of compute workers, memory, time of execution) needed to reproduce\nthe experiments?\nAnswer: [Yes]\nJustification: We provide the compute in the appendix.\nGuidelines:\n• The answer NA means that the paper does not include experiments.\n• The paper should indicate the type of compute workers CPU or GPU, internal cluster,\nor cloud provider, including relevant memory and storage.\n• The paper should provide the amount of compute required for each of the individual\nexperimental runs as well as estimate the total compute.\n• The paper should disclose whether the full research project required more compute\nthan the experiments reported in the paper (e.g., preliminary or failed experiments that\ndidn’t make it into the paper).\n9. Code Of Ethics\nQuestion: Does the research conducted in the paper conform, in every respect, with the\nNeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines?\nAnswer: [Yes]\nJustification: The paper conforms to the NeurIPS Code of Ethics.\nGuidelines:\n• The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics.\n• If the authors answer No, they should explain the special circumstances that require a\ndeviation from the Code of Ethics.\n• The authors should make sure to preserve anonymity (e.g., if there is a special consid-\neration due to laws or regulations in their jurisdiction).\n10. Broader Impacts\nQuestion: Does the paper discuss both potential positive societal impacts and negative\nsocietal impacts of the work performed?\nAnswer: [NA]\nJustification: Our work does not have societal impact.\nGuidelines:\n• The answer NA means that there is no societal impact of the work performed.\n• If the authors answer NA or No, they should explain why their work has no societal\nimpact or why the paper does not address societal impact.\n• Examples of negative societal impacts include potential malicious or unintended uses\n(e.g., disinformation, generating fake profiles, surveillance), fairness considerations\n(e.g., deployment of technologies that could make decisions that unfairly impact specific\ngroups), privacy considerations, and security considerations.\n23\n",
  "24": "• The conference expects that many papers will be foundational research and not tied\nto particular applications, let alone deployments. However, if there is a direct path to\nany negative applications, the authors should point it out. For example, it is legitimate\nto point out that an improvement in the quality of generative models could be used to\ngenerate deepfakes for disinformation. On the other hand, it is not needed to point out\nthat a generic algorithm for optimizing neural networks could enable people to train\nmodels that generate Deepfakes faster.\n• The authors should consider possible harms that could arise when the technology is\nbeing used as intended and functioning correctly, harms that could arise when the\ntechnology is being used as intended but gives incorrect results, and harms following\nfrom (intentional or unintentional) misuse of the technology.\n• If there are negative societal impacts, the authors could also discuss possible mitigation\nstrategies (e.g., gated release of models, providing defenses in addition to attacks,\nmechanisms for monitoring misuse, mechanisms to monitor how a system learns from\nfeedback over time, improving the efficiency and accessibility of ML).\n11. Safeguards\nQuestion: Does the paper describe safeguards that have been put in place for responsible\nrelease of data or models that have a high risk for misuse (e.g., pretrained language models,\nimage generators, or scraped datasets)?\nAnswer: [NA]\nJustification: NA\nGuidelines:\n• The answer NA means that the paper poses no such risks.\n• Released models that have a high risk for misuse or dual-use should be released with\nnecessary safeguards to allow for controlled use of the model, for example by requiring\nthat users adhere to usage guidelines or restrictions to access the model or implementing\nsafety filters.\n• Datasets that have been scraped from the Internet could pose safety risks. The authors\nshould describe how they avoided releasing unsafe images.\n• We recognize that providing effective safeguards is challenging, and many papers do\nnot require this, but we encourage authors to take this into account and make a best\nfaith effort.\n12. Licenses for existing assets\nQuestion: Are the creators or original owners of assets (e.g., code, data, models), used in\nthe paper, properly credited and are the license and terms of use explicitly mentioned and\nproperly respected?\nAnswer: [Yes] ,\nJustification: Yes, we cited every dataset and models we used.\nGuidelines:\n• The answer NA means that the paper does not use existing assets.\n• The authors should cite the original paper that produced the code package or dataset.\n• The authors should state which version of the asset is used and, if possible, include a\nURL.\n• The name of the license (e.g., CC-BY 4.0) should be included for each asset.\n• For scraped data from a particular source (e.g., website), the copyright and terms of\nservice of that source should be provided.\n• If assets are released, the license, copyright information, and terms of use in the\npackage should be provided. For popular datasets, paperswithcode.com/datasets\nhas curated licenses for some datasets. Their licensing guide can help determine the\nlicense of a dataset.\n• For existing datasets that are re-packaged, both the original license and the license of\nthe derived asset (if it has changed) should be provided.\n24\n",
  "25": "• If this information is not available online, the authors are encouraged to reach out to\nthe asset’s creators.\n13. New Assets\nQuestion: Are new assets introduced in the paper well documented and is the documentation\nprovided alongside the assets?\nAnswer: [NA]\nJustification: We don’t release new dataset.\nGuidelines:\n• The answer NA means that the paper does not release new assets.\n• Researchers should communicate the details of the dataset/code/model as part of their\nsubmissions via structured templates. This includes details about training, license,\nlimitations, etc.\n• The paper should discuss whether and how consent was obtained from people whose\nasset is used.\n• At submission time, remember to anonymize your assets (if applicable). You can either\ncreate an anonymized URL or include an anonymized zip file.\n14. Crowdsourcing and Research with Human Subjects\nQuestion: For crowdsourcing experiments and research with human subjects, does the paper\ninclude the full text of instructions given to participants and screenshots, if applicable, as\nwell as details about compensation (if any)?\nAnswer: [NA]\nJustification: we don’t have any.\nGuidelines:\n• The answer NA means that the paper does not involve crowdsourcing nor research with\nhuman subjects.\n• Including this information in the supplemental material is fine, but if the main contribu-\ntion of the paper involves human subjects, then as much detail as possible should be\nincluded in the main paper.\n• According to the NeurIPS Code of Ethics, workers involved in data collection, curation,\nor other labor should be paid at least the minimum wage in the country of the data\ncollector.\n15. Institutional Review Board (IRB) Approvals or Equivalent for Research with Human\nSubjects\nQuestion: Does the paper describe potential risks incurred by study participants, whether\nsuch risks were disclosed to the subjects, and whether Institutional Review Board (IRB)\napprovals (or an equivalent approval/review based on the requirements of your country or\ninstitution) were obtained?\nAnswer: [NA]\nJustification: We don’t have this.\nGuidelines:\n• The answer NA means that the paper does not involve crowdsourcing nor research with\nhuman subjects.\n• Depending on the country in which research is conducted, IRB approval (or equivalent)\nmay be required for any human subjects research. If you obtained IRB approval, you\nshould clearly state this in the paper.\n• We recognize that the procedures for this may vary significantly between institutions\nand locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the\nguidelines for their institution.\n• For initial submissions, do not include any information that would break anonymity (if\napplicable), such as the institution conducting the review.\n25\n"
}