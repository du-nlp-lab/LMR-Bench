{
    "instance_id": 2,
    "paper_name": "TimeMixer: Decomposable Multiscale Mixing for Time Series Forecasting",
    "paper_url": "https://arxiv.org/abs/2405.14616",
    "year": 2024,
    "repo_url": "https://github.com/kwuking/TimeMixer",
    "repo_folder_name": "TimeMixer",
    "implementations": [
        {
            "instruction": "Implement the __init__ and forward function in class MultiScaleSeasonMixing in TimeMixer.py based on the Seasonal Mixing mentioned in the paper and the code repository. Implement self.down_sampling_layers in __init__. The input parameters season_list is corresponding to the set of multiscale seasonal parts in the paper.",
            "index": 1,
            "goal_file": "models/TimeMixer.py",
            "golden_file": "golden_files/TimeMixer_golden.py",
            "goal_function": "MultiScaleSeasonMixing",
            "class_name": "MultiScaleSeasonMixing",
            "retrieval_context": [],
            "unit_test_file": "unit_test/unit_test_1.py"
        },
        {
            "instruction": "Implement the __init__ and forward function in class MultiScaleTrendMixing in TimeMixer.py based on the Trend Mixing mentioned in the paper and the code repository. Implement self.up_sampling_layers in __init__. The input parameters trend_list is corresponding to the multiscale trend components in the paper.",
            "index": 2,
            "goal_file": "models/TimeMixer.py",
            "golden_file": "golden_files/TimeMixer_golden.py",
            "goal_function": "MultiScaleTrendMixing",
            "class_name": "MultiScaleTrendMixing",
            "retrieval_context": [],
            "unit_test_file": "unit_test/unit_test_2.py"
        }
    ]
}